@page "/cart/{id}"
@using Blazored.LocalStorage
@using MCake.Data
@using MCake.Service
@using MCake.Models
@using System.Reactive.Linq
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject MainService _main
@inject ApplicationDbContext _context
@inject ProductCollectionsController _collection
@inject CartsController _db
@attribute [Authorize]

<div class="page-header text-center" style="background-image: url('assets/images/page-header-bg.jpg')">
    <div class="container">
        <h1 class="page-title">Shopping Cart<span>Shop</span></h1>
    </div><!-- End .container -->
</div>

@if(product.Count() > 0)
{
    <div class="cart">
    <div class="container">
        <div class="col-md-10">
            <table class="table table-cart table-mobile">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                        <th></th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var i in product)
                    {
                        <tr>
                            <td class="product-col">
                                <div class="product">
                                    <figure class="product-media">
                                        <a href="@(_main.Port + i.Image_1)">
                                            <img src="@(_main.Port + i.Image_1)" alt="Product image">
                                        </a>
                                    </figure>

                                    <h3 class="product-title">
                                        <a href="/productdetail/@i.ProductId"><b>@i.ProductName</b></a>
                                    </h3><!-- End .product-title -->
                            </div><!-- End .product -->
                        </td>
                            <td class="price-col">$&nbsp;@i.Price</td>
                            <td>
                                <div class="col-md-2">
                                    <button class="btn-secondary btn-md shadow" @onclick="@(()=>Decrement(@i))"> &nbsp;- &nbsp;</button>&nbsp;
                                    <strong align="center">@i.Quantity</strong>
                                    &nbsp;<button class="btn-md btn-secondary shadow" @onclick="@(()=>Increment(@i))">&nbsp;+ &nbsp;</button>
                                </div><!-- End .cart-product-quantity -->
                        </td>
                            <td class="total-col">$&nbsp;@(int.Parse(i.Price) * int.Parse(i.Quantity))</td>
                            <td class="remove-col"><button class="btn-remove" @onclick="@(()=>Delete(i.ProductCollectionId))"><i class="icon-close"></i></button></td>
                        </tr>

                    }
                </tbody>
            </table><!-- End .table table-wishlist -->

            <button class="btn btn-outline-dark-2" @onclick="@Get"><span>UPDATE CART</span><i class="icon-refresh"></i></button>
        </div><!-- End .cart-bottom -->
    </div><br /><!-- End .col-lg-9 -->
    <div class="row">
        <div class="col-md-3">
            <div class="summary summary-cart">
                <h3 class="summary-title">Cart Total</h3><!-- End .summary-title -->

                <table class="table table-summary">
                    <tbody>
                        <tr class="summary-subtotal">
                            <td>Subtotal:</td>
                            <td>$&nbsp;@Price.00</td>
                        </tr><!-- End .summary-subtotal -->
                        <tr class="summary-shipping">
                            <td>Shipping:</td>
                            <td>$&nbsp;@ShoppingPrice</td>
                        </tr>

                        <tr class="summary-total">
                            <td>Total:</td>
                            <td>$&nbsp;@(Price + ShoppingPrice).00</td>
                        </tr><!-- End .summary-total -->
                        <tr>
                        <td><a href="/checkout/@id" class="btn btn-outline-dark-2 btn-block mb-3">PROCEED TO CHECKOUT</a></td>
                        </tr>
                    </tbody>
                </table><!-- End .table table-summary -->


            </div><!-- End .summary -->

            <a href="/categories" class="btn btn-outline-dark-2 btn-block mb-3"><span>CONTINUE SHOPPING</span><i class="icon-refresh"></i></a>
        </div><!-- End .col-lg-3 -->
        
    </div><!-- End .row -->
</div><!-- End .container -->
}
@if(product.Count()==0)
{
    <h5 align="center">No products available in cart</h5>
}


@code {
    [Parameter]
    public string id { get; set; }
    const string port = "ss";
    public ProductCollection col = new();
    public Order order = new();
    public List<ProductCollection> product = new();
    public List<int> prices = new();
    public List<int> shopping_price = new();
    public int Price = new();
    public Cart cart = new();
    public int ShoppingPrice = new();




    protected override async Task OnInitializedAsync()
    {
        await Get();


    }

    async Task Get()
    {
        var e = await _main.GetCartItemsAsync(Guid.Parse(id));
        e.Subscribe(async r =>
        {
            product = r;
            prices.Clear();
            shopping_price.Clear();
            r.ForEach(t => Add(int.Parse(t.Price), int.Parse(t.Quantity)));
            r.ForEach(t => Cal(int.Parse(t.ShippingPrice)));
            var d = await _db.GetCart(Guid.Parse(id));
            cart = d;cart.ShippingPrice = ShoppingPrice;
            cart.Total = (ShoppingPrice + Price);
            await _db.PutCart(Guid.Parse(id), cart);
            e.Dispose();
        });
    }

    void Add(int n, int q)
    {
        var m = (n * q);
        prices.Add(m);
        var t = prices.Sum();
        Price = t;
       
    }
    void Cal(int n)
    {
        shopping_price.Add(n);
        var t = shopping_price.Sum();
        ShoppingPrice = t;
        
    }
    async Task Increment(ProductCollection p)
    {

        if (int.Parse(p.Quantity) < 10)
        {
            var res = (int.Parse(p.Quantity) + 1);
            p.Quantity = res.ToString();
            await _collection.PutProductCollection(p.ProductCollectionId, p);
            await Get();
        }
    }
    async Task Decrement(ProductCollection p)
    {
        if (int.Parse(p.Quantity) > 1)
        {
            var res = (int.Parse(p.Quantity) - 1);
            p.Quantity = res.ToString();
            await _collection.PutProductCollection(p.ProductCollectionId, p);
            await Get();

        }
    }
    async Task Delete(Guid Id)
    {
        await _collection.DeleteProductCollection(Id);
        await Get();
    }
}
