@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Extensions.Caching.Memory
@inject NavigationManager router
@inject CategoriesController _category
@inject MainService _main
@inject IMemoryCache _store
@inject CartsController _cart

<div class="header-middle sticky-header">
    <div class="container-fluid">
        <div class="header-left">
            
            <a href="/" class="logo">
                <h2>MCake</h2>
            </a>
            
            <style>
                .active {
                    color: brown;
                }</style>
          
                <ul style="margin-left:14px;" class="top-menu">
                        <li>
                            <a>PAGES</a>
                            <nav>
                            <ul  style="margin:3px;" >
                          
                          <li class="megamenu-container">
                        <NavLink ActiveClass="active" href="/">Home</NavLink>
                        </li>
                        <AuthorizeView Roles="Admin,Manager">
                            <Authorized>
                                <li>
                                    <NavLink ActiveClass="active" href="@_main.Port">Administration</NavLink>
                                </li>
                            </Authorized>
                        </AuthorizeView>

                        <li>
                            <NavLink ActiveClass="active" href="/posts">Blog</NavLink>

                        </li>
                        
                            </ul>
                            </nav>
                        </li>
                    </ul><!-- End .top-menu -->
        
        </div><!-- End .header-left -->

        <div class="header-right">
            <div class="header-search header-search-extended header-search-visible">
                <a href="#" class="search-toggle" role="button"><i class="icon-search"></i></a>
                <EditForm Model="@search" OnSubmit="Add">
                    <div class="header-search-wrapper search-wrapper-wide">
                        <label for="q" class="sr-only">Search</label>
                        <InputText @bind-Value="@search.input" type="search" class="form-control" name="q" id="q" placeholder="Search product ..." required />
                        <button class="btn btn-primary" type="submit"><i class="icon-search"></i></button>
                    </div><!-- End .header-search-wrapper -->
                </EditForm>
            </div><!-- End .header-search -->

            <AuthorizeView>
                <Authorized>
                    <div class="cart-dropdown">
                        <a href="/cart/@ID" class="dropdown-toggle" role="button" aria-haspopup="true" aria-expanded="false" data-display="static">
                            <i class="icon-shopping-cart"></i>
                            <span class="cart-count">@Count</span>
                        </a>
                    </div>
                </Authorized>
            </AuthorizeView>

        </div><!-- End .header-right -->
    </div><!-- End .container-fluid -->
</div><!-- End .header-middle -->



<div class="mobile-menu-container">
    <div class="mobile-menu-wrapper">
        <span class="mobile-menu-close navbar-collapse collapse" ><i class="icon-close"></i></span>

        <EditForm Model="@search" OnSubmit="Add">
            <div class="header-search-wrapper search-wrapper-wide">
                <label for="q" class="sr-only">Search</label>
                <InputText @bind-Value="@search.input" type="search" class="form-control" name="q" id="q" placeholder="Search product ..." required />
                <button class="btn btn-primary" type="submit"><i class="icon-search"></i></button>
            </div><!-- End .header-search-wrapper -->
        </EditForm>

        <nav class="mobile-nav">
            <ul class="mobile-menu">
                <li class="megamenu-container active">
                    <NavLink ActiveClass="active" href="/">Home</NavLink>
                </li>
                <AuthorizeView Roles="Admin,Manager">
                    <Authorized>
                        <li>
                            <NavLink ActiveClass="active" href="@_main.Port">Administration</NavLink>
                        </li>
                    </Authorized>
                </AuthorizeView>

                <li>
                    <NavLink ActiveClass="active" href="/posts">Blog</NavLink>

                </li>



            </ul>
        </nav><!-- End .mobile-nav -->

        <div class="social-icons">
            <a href="#" class="social-icon" target="_blank" title="Facebook"><i class="icon-facebook-f"></i></a>
            <a href="#" class="social-icon" target="_blank" title="Twitter"><i class="icon-twitter"></i></a>
            <a href="#" class="social-icon" target="_blank" title="Instagram"><i class="icon-instagram"></i></a>
            <a href="#" class="social-icon" target="_blank" title="Youtube"><i class="icon-youtube"></i></a>
        </div><!-- End .social-icons -->
    </div><!-- End .mobile-menu-wrapper -->
</div><!-- End .mobile-menu-container -->
@code {
    const string port = "https://localhost:44310/";
    public List<Category> categories = new();
    public Search search = new();
    public Cart cart = new();
    public Guid ID;
    public int Count;
    public class Search
    {
        public string input { get; set; }
    }
      private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override async Task OnInitializedAsync()
    {

        await Cart();



    }

    async Task Cart()
    {
        var r = await _main.NavCheckCartAsync();
        r.Subscribe(async s =>
       {
           if (s != null)
           {
               ID = Guid.Parse(s);

           }


       });
        var i = await _main.NavGetCartItemsAsync(ID);
        i.Subscribe(e =>
        {
            if (e != null)
            {
                // Count = e.Count();
                var w = _main.CartItems.Subscribe(f => { Count = f.Count(); });
            }
        });


    }

    async Task Get()
    {
        var res = await _category.GetCategories();
        categories = res.Value.ToList();
    }
    async Task Add()
    {
        OnInitialized();
        router.NavigateTo($"/search/{search.input}");
    }


}